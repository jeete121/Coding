Pattern::

while(j<size)
 {
    calculation
    
    if(windowSize < k)          windowSize==> (j-i+1)
            j++
    else if(windowSize==k)
     {
       ans<--- Calculation
       Calculation remove for ith index
       Window size maintaind and slide window
    }
 }

return ans


All Problem Links for fixed size sliding window::


https://leetcode.com/discuss/interview-question/3100856/Fixed-Size-Sliding-Window-(Important-Questions-with-Solutions)


Problems::

Fixed Size::

1. Maximum/Minimum Subarray of size k (https://www.geeksforgeeks.org/problems/max-sum-subarray-of-size-k5313/1)

2. First negative Number in every window of size k.

3. Count occurrences of anagrams.

4. Maximum of all subarray of size k.

5. Max of minimum for every window size k.

6. Permutation in String (https://leetcode.com/problems/permutation-in-string/description/)


1. Maximum/Minimum Subarray of size k (https://www.geeksforgeeks.org/problems/max-sum-subarray-of-size-k5313/1)


class Solution{   
public:
    long maximumSumSubarray(int K, vector<int> &Arr , int N){
        // code here 
        int i=0,j=0;
        long sum=0;
        long  mx=INT_MIN;
        while(j<N)
        {
            sum+=Arr[j];
            if(j-i+1<K)
              j++;
            else
            {
                mx=max(mx,sum);
                sum-=Arr[i];
                i++;
                j++;
            }
        }
        return mx;
    }
};



6. Permutation in String: https://leetcode.com/problems/permutation-in-string/description/

class Solution {
    public boolean checkInclusion(String s1, String s2) {

        int n = s1.length();
        int m = s2.length();
        int freq[] = new int[26];
        int freq1[] = new int[26];
        
        if(m<n){
            return false;
        }
        for(int i = 0;i<n;i++){
            freq[s1.charAt(i)-'a']++;
        }

        int i = 0,j = 0;
        while(j<m){
              if(j-i+1<n){
                freq1[s2.charAt(j)-'a']++;
                j++;
              }
              else {
                int flag = 0;
                freq1[s2.charAt(j)-'a']++;
                for(int k = 0;k<26;k++){
                    if(freq[k] != freq1[k]){
                        flag=1;
                        break;
                    }
                }
                if(flag == 0) {
                    return true;
                }
                freq1[s2.charAt(i)-'a']--;
                i++;
                j++;
              }
        }

        return false;
    }

}